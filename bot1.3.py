import logging
import threading
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from datetime import datetime, timedelta
import os

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)
logger = logging.getLogger(__name__)
#—Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
homework_file = 'homework.txt'
schedule_file = 'schedule.txt'
homework_dict = {}
schedule_dict = {}
#–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∑
def load_homework():
    if os.path.exists(homework_file):
        with open(homework_file, 'r', encoding='utf-8') as file:
            for line in file:
                line = line.strip()
                if line:
                    parts = line.split(': ', 1)
                    if len(parts) == 2:
                        subject, homework = parts
                        homework_dict.setdefault(subject, []).append(homework)
#—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∑
def save_homework():
    with open(homework_file, 'w', encoding='utf-8') as file:
        for subject, assignments in homework_dict.items():
            for homework in assignments:
                file.write(f"{subject}: {homework}\n")
#–∑–∞–≥—Ä—É–∑–∫–∞ –∏–Ω—Ñ—ã –≤ —Ñ–∞–π–ª —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
def load_schedule():
    if os.path.exists(schedule_file):
        with open(schedule_file, 'r', encoding='utf-8') as file:
            for line in file:
                line = line.strip()
                if line:
                    parts = line.split(': ', 1)
                    if len(parts) == 2:
                        subject, schedule = parts
                        schedule_dict.setdefault(subject, []).append(schedule)

def save_schedule():
    with open(schedule_file, 'w', encoding='utf-8') as file:
        for subject, schedule_times in schedule_dict.items():
            for schedule_time in schedule_times:
                file.write(f"{subject}: {schedule_time}\n")
#—Å–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏ –∏—Ö –∑–Ω–∞–∫–æ–≤
subject_emojis = {
    "–ì–µ–æ–º–µ—Ç—Ä–∏—è": "üìê",
    "–ê–ª–≥–µ–±—Ä–∞": "üßÆ",
    "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞": "üìñ",
    "–†—É—Å—Å–∫–∏–π": "üá∑üá∫",
    "–ò—Å—Ç–æ—Ä–∏—è": "üè∫",
    "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ": "ü´Ç",
    "–§–∏–Ω.–ì—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å": "üí∞",
    "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å": "üìä",
    "–ú—É–∑—ã–∫–∞": "üé∂",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞": "üíª",
    "–ù–µ–º–µ—Ü–∫–∏–π": "üá©üá™",
    "–ê–Ω–≥–ª–∏—Å–∫–∏–π": "üá∫üá∏",
    "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è": "üåç",
    "–ë–∏–æ–ª–æ–≥–∏—è": "üçÉ",
}
#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∑
async def send_homework(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    response = "üìö *–°–ø–∏—Å–æ–∫ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π:*\n\n" if homework_dict else '–ù–µ—Ç –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π.'
    for subject, assignments in homework_dict.items():
        emoji = subject_emojis.get(subject, "üìù")
        response += f"{emoji} *{subject}:*\n"
        for i, homework in enumerate(assignments, start=1):
            response += f"   > {i}. {homework}\n"
        response += "\n" + "-" * 30 + "\n\n"

    sent_message = await update.message.reply_text(response, parse_mode='Markdown')
    await context.bot.pin_chat_message(chat_id=update.effective_chat.id, message_id=sent_message.message_id)
#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def send_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    response = "üóìÔ∏è *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:*\n\n" if schedule_dict else '–ù–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.'
    for subject, times in schedule_dict.items():
        response += f"üìù *{subject}:*\n"
        for i, schedule in enumerate(times, start=1):
            response += f"   > {i}. {schedule}\n"
        response += "\n" + "-" * 30 + "\n\n"
    await update.message.reply_text(response, parse_mode='Markdown')
#–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n'
        '–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π —Å—Ä–∞–∑—É —Å–ø–∏—Å–∫–æ–º (–æ–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ ‚Äî –æ–¥–Ω–æ –∑–∞–¥–∞–Ω–∏–µ).\n'
        '–ö–æ–º–∞–Ω–¥–∞ /dz –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è.\n'
        '–ö–æ–º–∞–Ω–¥–∞ /raspisanie –ø–æ–∫–∞–∂–µ—Ç —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n'
        '–ö–æ–º–∞–Ω–¥–∞ /edit <–ø—Ä–µ–¥–º–µ—Ç> <–Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è> <–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ> –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n'
        '–ö–æ–º–∞–Ω–¥–∞ /delete <–ø—Ä–µ–¥–º–µ—Ç> <–Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n'
        '–ö–æ–º–∞–Ω–¥–∞ /add_schedule –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Å—Ä–∞–∑—É —Å–ø–∏—Å–∫–æ–º.\n'
        '–ö–æ–º–∞–Ω–¥–∞ /delete_schedule <–ø—Ä–µ–¥–º–µ—Ç> <–Ω–æ–º–µ—Ä> –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.'
    )
#–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add
async def add_homework(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.args:
        message = update.message.text.split('\n')[1:]
        for line in message:
            parts = line.split(' ', 1)
            if len(parts) == 2:
                subject, homework = parts
                homework_dict.setdefault(subject, []).append(homework)
        save_homework()
        await update.message.reply_text('–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã!')
    else:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–æ–º: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –∑–∞–¥–∞–Ω–∏–µ.')
#–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_schedule
async def add_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.args:
        message = update.message.text.split('\n')[1:]
        for line in message:
            parts = line.split(' ', 1)
            if len(parts) == 2:
                subject, schedule_time = parts
                schedule_dict.setdefault(subject, []).append(schedule_time)
        save_schedule()
        await update.message.reply_text('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!')
    else:
        await update.message.reply_text('–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º: –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ ‚Äî –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç –∏ –≤—Ä–µ–º—è.')
#–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit
async def edit_homework(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) >= 3:
        subject = context.args[0]
        try:
            index = int(context.args[1]) - 1
            new_homework = ' '.join(context.args[2:])
            if subject in homework_dict and 0 <= index < len(homework_dict[subject]):
                homework_dict[subject][index] = new_homework
                save_homework()
                await update.message.reply_text(f'–ó–∞–¥–∞–Ω–∏–µ –ø–æ *{subject}* –æ–±–Ω–æ–≤–ª–µ–Ω–æ!')
            else:
                await update.message.reply_text('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        except ValueError:
            await update.message.reply_text('–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
    else:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /edit <–ø—Ä–µ–¥–º–µ—Ç> <–Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è> <–Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ>')
#–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete
async def delete_homework(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) == 2:
        subject = context.args[0]
        try:
            index = int(context.args[1]) - 1
            if subject in homework_dict and 0 <= index < len(homework_dict[subject]):
                del homework_dict[subject][index]
                if not homework_dict[subject]:
                    del homework_dict[subject]
                save_homework()
                await update.message.reply_text(f'–ó–∞–¥–∞–Ω–∏–µ –ø–æ *{subject}* —É–¥–∞–ª–µ–Ω–æ!')
            else:
                await update.message.reply_text('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        except ValueError:
            await update.message.reply_text('–ù–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
    else:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete <–ø—Ä–µ–¥–º–µ—Ç> <–Ω–æ–º–µ—Ä –∑–∞–¥–∞–Ω–∏—è>')
#–æ–±—Ä–æ–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /delete_schedule
async def delete_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if len(context.args) == 2:
        subject = context.args[0]
        try:
            index = int(context.args[1]) - 1
            if subject in schedule_dict and 0 <= index < len(schedule_dict[subject]):
                del schedule_dict[subject][index]
                if not schedule_dict[subject]:
                    del schedule_dict[subject]
                save_schedule()
                await update.message.reply_text(f'–í—Ä–µ–º—è –¥–ª—è *{subject}* —É–¥–∞–ª–µ–Ω–æ!')
            else:
                await update.message.reply_text('–í—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.')
        except ValueError:
            await update.message.reply_text('–ù–æ–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.')
    else:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /delete_schedule <–ø—Ä–µ–¥–º–µ—Ç> <–Ω–æ–º–µ—Ä>')
#–Ω—É –≤—ã –ø–æ–Ω—è–ª–∏
def clear_homework():
    global homework_dict
    homework_dict.clear()
    save_homework()
    logger.info("–í—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.")
#–Ω—É –≤—ã –ø–æ–Ω—è–ª–∏
def clear_schedule():
    global schedule_dict
    schedule_dict.clear()
    save_schedule()
    logger.info("–í—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –æ—á–∏—â–µ–Ω—ã.")

#—Ç—É—Ç –º—ã –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∑ –∏–∑ —Ñ–∞–π–ª–æ–≤
def main() -> None:
    load_homework()
    load_schedule()
    application = ApplicationBuilder().token("7177177518:AAGCXFgxplOQlRck_5W0_Bnp9lu4be9PyrQ").build()
#—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥ —Ç–∏–ø–æ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("add", add_homework))
    application.add_handler(CommandHandler("edit", edit_homework))
    application.add_handler(CommandHandler("delete", delete_homework))
    application.add_handler(CommandHandler("dz", send_homework))
    application.add_handler(CommandHandler("raspisanie", send_schedule))
    application.add_handler(CommandHandler("add_schedule", add_schedule))
    application.add_handler(CommandHandler("delete_schedule", delete_schedule))
    
    application.run_polling()
#–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    main()
